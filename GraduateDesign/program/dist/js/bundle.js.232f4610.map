{"version":3,"names":[],"mappings":"","sources":["js/bundle.dabba67e.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _weibovis = require('./weibovis.js');\n\nvar _layout = require('./layout.js');\n\nvar _verticalTab = require('./vertical-tab.js');\n\nvar _taxiVis = require('./taxiVis.js');\n\nvar _poivis = require('./poivis.js');\n\nvar iniObj = {\n    'weibo': 0,\n    'poi': 0,\n    'taxi': 0\n};\n\n(0, _weibovis.weiboTextMap)(\"map\");\niniObj.weibo = 1;\n\n/**\r\n * 左侧栏响应函数\r\n * @param  {[obj]} event [事件]\r\n * @return {[null]}       [null]\r\n */\nfunction toolTapClick(event) {\n    switch (event.target.id) {\n        case \"weibo-vis\":\n            if (!iniObj.weibo) {\n                (0, _weibovis.weiboTextMap)(\"map\");\n                iniObj.weibo = 1;\n            }\n            break;\n        case \"poi-vis\":\n            if (!iniObj.poi) {\n                (0, _poivis.poiVisMap)('bdmap');\n                iniObj.poi = 1;\n            }\n            break;\n        case \"taxi-vis\":\n            if (!iniObj.taxi) {\n                (0, _taxiVis.taxiVisChart)('bdmap-t');\n                iniObj.taxi = 1;\n            }\n            break;\n    }\n}\n//初始化左侧栏\n(0, _verticalTab.verticalTap)(\"tool-container\", toolTapClick);\n//初始化主窗口布局\n(0, _layout.layoutIni)();\n\n//初始化主图\n// var source=new ol.source.OSM();\n// var baseLayer=new ol.layer.Tile({\n//     source:source\n// });\n// var attribution = new ol.control.Attribution({\n//     collapsible: false\n//   });\n// var ol_map=new ol.Map({\n//     layers:[baseLayer],\n//     target: 'map',\n//     controls: ol.control.defaults({ attribution: false }).extend([attribution]),\n//     view: new ol.View({\n//       center: ol.proj.fromLonLat([116.5, 39.92]),\n//       zoom: 10\n//     })\n//  });\n\n},{\"./layout.js\":2,\"./poivis.js\":3,\"./taxiVis.js\":4,\"./vertical-tab.js\":5,\"./weibovis.js\":6}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nfunction layoutIni() {\n\tvar clientHeight = document.body.clientHeight;\n\tvar headerHeight = $(\"header\").height();\n\tvar mainHeight = clientHeight - headerHeight - 15;\n\t$(\"#main\").height(mainHeight);\n}\n\nexports.layoutIni = layoutIni;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nfunction poiVisMap(domId) {\n\tvar map = initMap(domId);\n\t$.get(\"http://202.114.123.53/zx/weibo/getWeiboData.php\", { 'city': '武汉' }).then(function (data) {\n\t\tdata = JSON.parse(data);\n\t\tvar points = [];\n\t\tvar heatMapPoint = [];\n\t\tfor (var x in data) {\n\t\t\tvar item = data[x];\n\t\t\tvar lat = item.geo.coordinates[0];\n\t\t\tvar lon = item.geo.coordinates[1];\n\t\t\tpoints.push([lat, lon]);\n\t\t\theatMapPoint.push([lat, lon, 100.0]);\n\t\t}\n\n\t\tvar heatMap = createHeatMap(heatMapPoint);\n\t\tmap.addLayer(heatMap);\n\n\t\tvar cluster = createCluster(points);\n\n\t\tcreateClusterLens(cluster, map, 'zoomlens');\n\n\t\tmap.on('zoomend', function (e) {\n\t\t\tvar current_level = e.target.getZoom();\n\t\t\tconsole.log(current_level);\n\t\t\tif (current_level <= 12) {\n\t\t\t\tmap.addLayer(heatMap);\n\t\t\t\tmap.removeLayer(cluster);\n\t\t\t} else if (current_level > 12) {\n\t\t\t\tmap.removeLayer(heatMap);\n\t\t\t\tmap.addLayer(cluster);\n\t\t\t} else if (current_level > 15) {\n\t\t\t\tmap.removeLayer(heatMap);\n\t\t\t\tmap.removeLayer(cluster);\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\r\n * 初始化地图\r\n * @param  {[string]} domId [地图容器dom id]\r\n * @return {[obj]}       [地图对象]\r\n */\nfunction initMap(domId) {\n\tL.mapbox.accessToken = 'pk.eyJ1IjoiZG9uZ2xpbmdlIiwiYSI6Ik1VbXI1TkkifQ.7ROsya7Q8kZ-ky9OmhKTvg';\n\tvar map = L.mapbox.map(domId, 'mapbox.light').setView([30.608623, 114.274462], 11);\n\treturn map;\n}\n\nfunction createCluster(data) {\n\tvar markers = new L.MarkerClusterGroup({\n\t\tshowCoverageOnHover: false,\n\t\tzoomToBoundsOnClick: false\n\t});\n\tfor (var i = 0, length = data.length; i < length; i++) {\n\t\tvar latlng = new L.LatLng(data[i][0], data[i][1]);\n\t\tvar marker = L.marker(latlng, {\n\t\t\ticon: L.mapbox.marker.icon({ 'marker-symbol': 'post', 'marker-color': '0044FF' })\n\t\t});\n\t\tmarkers.addLayer(marker);\n\t}\n\n\treturn markers;\n}\n\n/**\r\n * 创建cluster的lens\r\n * @param  {MarkerClusterGroup} cluster  [需要创建lens的MarkerClusterGroup]\r\n * @param  {L.Map} map      [主图的map对象]\r\n * @param  {string} lendomId [lens的domId]\r\n * @return {null}          [description]\r\n */\nfunction createClusterLens(cluster, map, lendomId) {\n\t//初始化zoommap\n\tvar zoommap = L.mapbox.map('zoommap', 'mapbox.streets', {\n\t\tfadeAnimation: false,\n\t\tzoomControl: false,\n\t\tattributionControl: false\n\t});\n\n\tvar oldLayer = [];;\n\tvar zl = document.getElementById(lendomId);\n\tcluster.on('clustermouseover', function (e) {\n\n\t\tvar point = map.latLngToContainerPoint(e.latlng);\n\n\t\t//获取当前的markers\n\t\tvar clickMarkers = e.layer.getAllChildMarkers();\n\t\t//移除lens中的marker\n\t\tfor (var m in oldLayer) {\n\t\t\tvar marker = oldLayer[m];\n\t\t\tzoommap.removeLayer(marker);\n\t\t}\n\t\toldLayer = [];\n\t\t//把当前的marker加入lens、oldLayer以备删除\n\t\tfor (var m in clickMarkers) {\n\t\t\tvar marker = clickMarkers[m];\n\t\t\tvar latlng = marker._latlng;\n\t\t\tvar zoomMarker = L.marker(latlng, {\n\t\t\t\ticon: L.mapbox.marker.icon({ 'marker-symbol': 'post', 'marker-color': '0044FF' })\n\t\t\t});\n\t\t\tzoomMarker.addTo(zoommap);\n\t\t\toldLayer.push(zoomMarker);\n\t\t}\n\t\t//移动lens\n\t\tzl.style.top = point.y - 100 + 'px';\n\t\tzl.style.left = point.x - 100 + 'px';\n\t\t//设置zoommap的显示区域\n\t\tzoommap.setView(e.latlng, map.getZoom() + 1, true);\n\t});\n}\n\nfunction createHeatMap(data) {\n\tvar heat = L.heatLayer(data, { radius: 25 });\n\treturn heat;\n}\nexports.poiVisMap = poiVisMap;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nfunction taxiVisChart(domId) {\n\tvar myChart = echarts.init(document.getElementById(domId));\n\tmyChart.showLoading();\n\t$.get(\"http://202.114.123.53/zx/taxi/getGeojson.php\", { 'city': '武汉市' }).then(function (data) {\n\n\t\t//注册map\n\t\techarts.registerMap('wuhan', JSON.parse(data));\n\n\t\t$.get(\"http://202.114.123.53/zx/taxi/getAllOdDataM.php\").then(function (data) {\n\t\t\tvar taxi_data = JSON.parse(data);\n\n\t\t\tvar draw_data = {};\n\n\t\t\t//统计轨迹\n\t\t\tfor (var i = 0, length = taxi_data.length; i < length; i++) {\n\t\t\t\tvar start_point = taxi_data[i];\n\n\t\t\t\tif (start_point.state !== 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (i >= length - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar end_point = taxi_data[i + 1];\n\t\t\t\tif (start_point.district === '' || end_point.district === '') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (draw_data[start_point.district]) {\n\t\t\t\t\tif (draw_data[start_point.district][end_point.district]) {\n\t\t\t\t\t\tdraw_data[start_point.district][end_point.district] += 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdraw_data[start_point.district][end_point.district] = 1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdraw_data[start_point.district] = {};\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tconsole.log(draw_data);\n\t\t\ttaxiEchartsMap(draw_data, myChart);\n\t\t});\n\t});\n}\n\nfunction taxiEchartsMap(data, myChart) {\n\tvar districtLonLat = {\n\t\t\"海淀区\": [116.299059, 39.966493],\n\t\t\"朝阳区\": [116.479583, 39.963396],\n\t\t\"东城区\": [116.419217, 39.937289],\n\t\t\"丰台区\": [116.29101, 39.86511],\n\t\t\"通州区\": [116.661831, 39.917813],\n\t\t\"石景山区\": [116.22317, 39.9125],\n\t\t\"门头沟区\": [116.107037, 39.948353],\n\t\t\"西城区\": [116.369199, 39.918698],\n\t\t\"房山区\": [116.147856, 39.754701],\n\t\t\"大兴区\": [116.147856, 39.754701],\n\t\t\"昌平区\": [116.237831, 40.227662],\n\t\t\"顺义区\": [116.659819, 40.136379],\n\t\t\"怀柔区\": [116.637972, 40.322782]\n\t};\n\tdistrictLonLat = {\n\t\t\"江汉区\": [114.274462, 30.608623],\n\t\t\"武昌区\": [114.320455, 30.56087],\n\t\t\"青山区\": [114.39275, 30.630875],\n\t\t\"江岸区\": [114.311256, 30.606385],\n\t\t\"洪山区\": [114.349919, 30.506497],\n\t\t\"汉阳区\": [114.221569, 30.56286],\n\t\t\"东西湖区\": [114.140794, 30.627519],\n\t\t\"硚口区\": [114.219557, 30.58848],\n\t\t\"蔡甸区\": [114.03271, 30.589226],\n\t\t\"黄陂区\": [114.375934, 30.889686],\n\t\t\"江夏区\": [114.329941, 30.381085],\n\t\t\"新洲区\": [114.807983, 30.848025],\n\t\t\"汉南区\": [114.193972, 30.479202]\n\t};\n\tvar option = {\n\t\tbackgroundColor: '#404a59',\n\t\ttitle: {\n\t\t\ttext: '武汉各区之间出租车流动图',\n\t\t\tsubtext: '',\n\t\t\tleft: 'center',\n\t\t\ttextStyle: {\n\t\t\t\tcolor: '#fff'\n\t\t\t}\n\t\t},\n\t\ttooltip: {\n\t\t\ttrigger: 'item',\n\t\t\tformatter: function formatter(v) {\n\t\t\t\treturn v.data[0].name + \" > \" + v.data[1].name;\n\t\t\t}\n\t\t},\n\t\tlegend: {\n\t\t\torient: 'vertical',\n\t\t\ttop: 'bottom',\n\t\t\tleft: 'right',\n\t\t\tdata: ['洪山区'],\n\t\t\ttextStyle: {\n\t\t\t\tcolor: '#fff'\n\t\t\t},\n\t\t\tselectedMode: 'single'\n\t\t},\n\t\tgeo: {\n\t\t\tmap: 'wuhan',\n\t\t\tlabel: {\n\t\t\t\temphasis: {\n\t\t\t\t\tshow: false\n\t\t\t\t}\n\t\t\t},\n\t\t\troam: true,\n\t\t\titemStyle: {\n\t\t\t\tnormal: {\n\t\t\t\t\tareaColor: '#323c48',\n\t\t\t\t\tborderColor: '#404a59'\n\t\t\t\t},\n\t\t\t\temphasis: {\n\t\t\t\t\tareaColor: '#2a333d'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tvisualMap: [{\n\t\t\ttype: 'continuous',\n\t\t\tmin: 0,\n\t\t\tmax: 50,\n\t\t\ttext: ['High', 'Low'],\n\t\t\trealtime: true,\n\t\t\tcalculable: true,\n\t\t\tcolor: ['orangered', 'yellow', 'lightskyblue']\n\t\t}],\n\t\tseries: []\n\t};\n\tvar series = [];\n\tvar planePath = 'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z';\n\tfor (var n in data) {\n\t\toption.legend.data.push(n);\n\t\tvar item = data[n];\n\t\tvar temp_markline_data = [];\n\t\tvar temp_point_data = [];\n\t\tfor (var v in item) {\n\t\t\tif (v != n) {\n\t\t\t\ttemp_markline_data.push([{ name: n, coord: districtLonLat[n], value: item[v] }, { name: v, coord: districtLonLat[v], value: item[v] }]);\n\t\t\t\ttemp_point_data.push({ name: v, value: districtLonLat[v].concat([item[v]]) });\n\t\t\t}\n\t\t}\n\t\tseries.push({\n\t\t\tname: n,\n\t\t\ttype: 'lines',\n\t\t\teffect: {\n\t\t\t\tshow: true,\n\t\t\t\tperiod: 6,\n\t\t\t\ttrailLength: 0,\n\t\t\t\tsymbol: 'arrow',\n\t\t\t\tsymbolSize: 15\n\t\t\t},\n\t\t\tlineStyle: {\n\t\t\t\tnormal: {\n\t\t\t\t\tcolor: '#a6c84c',\n\t\t\t\t\twidth: 1,\n\t\t\t\t\topacity: 0.4,\n\t\t\t\t\tcurveness: 0.2\n\t\t\t\t}\n\t\t\t},\n\t\t\tdata: temp_markline_data\n\t\t}, {\n\t\t\tname: n,\n\t\t\ttype: 'lines',\n\t\t\tzlevel: 1,\n\t\t\teffect: {\n\t\t\t\tshow: true,\n\t\t\t\tperiod: 6,\n\t\t\t\ttrailLength: 0.7,\n\t\t\t\tcolor: '#fff',\n\t\t\t\tsymbolSize: 3\n\t\t\t},\n\t\t\tlineStyle: {\n\t\t\t\tnormal: {\n\t\t\t\t\tcolor: '#a6c84c',\n\t\t\t\t\twidth: 0,\n\t\t\t\t\tcurveness: 0.2\n\t\t\t\t}\n\t\t\t},\n\t\t\tdata: temp_markline_data\n\t\t}, {\n\t\t\tname: n,\n\t\t\ttype: 'effectScatter',\n\t\t\tcoordinateSystem: 'geo',\n\t\t\tzlevel: 2,\n\t\t\trippleEffect: {\n\t\t\t\tbrushType: 'stroke'\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\tnormal: {\n\t\t\t\t\tshow: true,\n\t\t\t\t\tposition: 'right',\n\t\t\t\t\tformatter: '{b}'\n\t\t\t\t}\n\t\t\t},\n\t\t\tsymbolSize: function symbolSize(val) {\n\t\t\t\tvar size = Math.log(val[2]) * 3;\n\t\t\t\treturn size;\n\t\t\t},\n\t\t\titemStyle: {\n\t\t\t\tnormal: {\n\t\t\t\t\tcolor: '#a6c84c'\n\t\t\t\t}\n\t\t\t},\n\t\t\tdata: temp_point_data\n\t\t});\n\t}\n\toption.series = series;\n\tmyChart.setOption(option);\n\tmyChart.hideLoading();\n}\n\nexports.taxiVisChart = taxiVisChart;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n/*\r\n* 垂直滚动标签\r\n@param domId 需要初始化成verticalTap的domId\r\n*/\nfunction verticalTap(domId, fn) {\n\t//先初始化show or hide\n\tvar activeObj; //当前选中tab\n\tvar items = $(\"#\" + domId).find(\"> .tool-item\");\n\titems.each(function (index, elem) {\n\t\tvar constolId = $(elem).attr('data-control');\n\t\tif ($(elem).hasClass(\"active\")) {\n\t\t\t$(\"#\" + constolId).show();\n\t\t\tactiveObj = $(elem);\n\t\t} else {\n\t\t\t$(\"#\" + constolId).hide();\n\t\t}\n\t});\n\n\t//如果没有预设active值，则默认第一个是活动tab\n\tif (!activeObj) {\n\t\tvar activeItem = items[0];\n\t\tactiveObj = $(activeItem);\n\t\tactiveObj.addClass(\"active\");\n\t\tvar activeId = activeObj.attr(\"data-control\");\n\t\t$(\"#\" + activeId).show();\n\t}\n\n\t//点击切换\n\t$(\"#\" + domId).on(\"click\", function (event) {\n\n\t\tvar currentObj = $(event.target);\n\t\tif (!currentObj.attr(\"data-control\")) {\n\t\t\treturn;\n\t\t}\n\t\tif (currentObj.hasClass(\"active\")) {\n\t\t\treturn;\n\t\t}\n\n\t\t//被点击项拉到中间\n\t\tvar centerScroolTop = ($(\"#\" + domId).height() - currentObj.height()) / 2;\n\t\t$(\"#\" + domId).scrollTop(currentObj[0].offsetTop - centerScroolTop);\n\n\t\t//切换操作\n\t\tactiveObj.removeClass('active');\n\t\t$(\"#\" + activeObj.attr(\"data-control\")).hide();\n\n\t\tactiveObj = currentObj;\n\t\tactiveObj.addClass(\"active\");\n\t\tvar relatedId = activeObj.attr('data-control');\n\t\tif (relatedId) {\n\t\t\t$(\"#\" + relatedId).show();\n\t\t} else {\n\t\t\tconsole.log('need data-control attribute');\n\t\t}\n\n\t\t//执行绑定的额外的click操作\n\t\tfn(event);\n\t});\n}\n\nexports.verticalTap = verticalTap;\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction weiboTextMap(domId) {\n    var map = initMap(domId);\n    $.get(\"data/idf.txt\", function (data) {\n        var split_array = data.split(\"\\n\");\n        var idfArray = [];\n        for (var i = 0; i < split_array.length; i++) {\n            var item = split_array[i].split(\" \");\n            idfArray[item[0]] = parseInt(item[1]);\n        }\n        getWeiboData(\"北京\", map, idfArray);\n    });\n}\n\n/**\r\n * 初始化地图\r\n * @param  {[string]} domId [地图容器dom id]\r\n * @return {[obj]}       [地图对象]\r\n */\nfunction initMap(domId) {\n    L.mapbox.accessToken = 'pk.eyJ1IjoiZG9uZ2xpbmdlIiwiYSI6Ik1VbXI1TkkifQ.7ROsya7Q8kZ-ky9OmhKTvg';\n    var map = L.mapbox.map(domId, 'mapbox.light').setView([30.608623, 114.274462], 11);\n    return map;\n}\n\n/**\r\n * 获取微博数据\r\n * @param  {[string]} city     [城市名]\r\n * @param  {[obj]} map      [地图对象]\r\n * @param  {[string]} idfArray [idf的数组]\r\n * @return {[null]}          [无]\r\n */\nfunction getWeiboData(city, map, idfArray) {\n    $.get('http://202.114.123.53/zx/weibo/getWeiboData.php', { 'city': '武汉' }).then(function (data) {\n        handleWeiboData(event.target.responseText, map, idfArray);\n    });\n}\n\n/**\r\n * 获取微博数据 回调函数\r\n * @param  {[Array]} data     [微博数据:[{text:..,geo:..},{}]]\r\n * @param  {[Object]} map      [leaflet地图对象]\r\n * @param  {[Array]} idfArray [idf数据]\r\n * @return {[null]}          [null]\r\n */\nfunction handleWeiboData(data, map, idfArray) {\n    data = JSON.parse(data);\n    var markers = new L.MarkerClusterGroup({\n        showCoverageOnHover: false,\n        zoomToBoundsOnClick: false,\n        iconCreateFunction: function iconCreateFunction(cluster) {\n            var markers = cluster.getAllChildMarkers();\n            var allText = '';\n            for (var i = 0, length = markers.length; i < length; i++) {\n                allText += markers[i].options.title;\n            }\n            var innerTag = wordseg(allText, idfArray);\n            var c = ' marker-cluster-';\n            if (length < 10) {\n                c += 'small';\n            } else if (length < 100) {\n                c += 'medium';\n            } else {\n                c += 'large';\n            }\n            var iconRadius = Math.log(length) * 7 + 30;\n            var innerDivWidth = iconRadius * 0.8;\n            var innerDivMargin = iconRadius * 0.1;\n            var divString = \"<div style='width:\" + innerDivWidth + \"px;height:\" + innerDivWidth + \"px;margin-top:\" + innerDivMargin + \"px;margin-left:\" + innerDivMargin + \"px;'>\";\n            divString += \"<span style='line-height:\" + innerDivWidth + \"px;'>\" + innerTag + \"</span></div>\";\n            var divOption = {\n                html: divString,\n                className: 'marker-cluster' + c,\n                iconSize: new L.Point(iconRadius, iconRadius)\n            };\n            return new L.DivIcon(divOption);\n        }\n    });\n\n    //add marker to markers\n    for (var x in data) {\n        var item = data[x];\n        var lat = item.geo.coordinates[0];\n        var lon = item.geo.coordinates[1];\n        var re = /\\[.*\\]/g;\n\n        var text = item.text.replace(re, \"\");\n        var http_index = text.indexOf(\"http://\");\n        if (http_index != -1) {\n            text = text.substr(0, http_index);\n        }\n        text = text.replace(\"分享图片\", \"\");\n        var latlng = new L.LatLng(lat, lon);\n        var marker = L.marker(latlng, {\n            icon: L.mapbox.marker.icon({ 'marker-symbol': 'post', 'marker-color': '0044FF' }),\n            title: text\n        });\n        markers.addLayer(marker);\n    }\n    markers.on(\"clustermouseover\", showWeiboDetail);\n    map.addLayer(markers);\n}\n\nfunction showWeiboDetail(e) {\n\n    var tooltip = $(\"#tooltip\");\n    var tooltip_content = $(\"#tooltip-content\");\n    var centerText = e.layer._icon.textContent;\n    var point = e.target._map.latLngToContainerPoint(e.latlng);\n    console.log(point);\n\n    //获取当前的markers\n    var currentMarkers = e.layer.getAllChildMarkers();\n\n    tooltip.css(\"left\", point.x + $(\"#map\")[0].offsetLeft);\n    tooltip_content.css(\"width\", '200px');\n\n    tooltip.css(\"width\", '205px');\n\n    if ($(\"#map\").height() - point.y <= 250) {\n        tooltip.css(\"top\", point.y - 250);\n    } else {\n        tooltip.css(\"top\", point.y);\n    }\n\n    tooltip_content.empty();\n\n    var related_weibo_num = 0;\n    tooltip.show();\n    var centerReg = new RegExp(centerText, 'g');\n    for (var i = 0, length = currentMarkers.length; i < length; i++) {\n        var marker = currentMarkers[i];\n        var text = marker.options.title;\n        var center_index = text.indexOf(centerText);\n        if (center_index != -1) {\n            related_weibo_num++;\n            text = text.replace(centerReg, \"<span class='weibo-center-text'>\" + centerText + \"</span>\");\n            tooltip_content.append(\"<div class='weibo-text-item'>\" + text + \"</div>\");\n        }\n    }\n    var text_item = $('.weibo-text-item:last-child');\n    console.log(text_item[0].offsetTop);\n    if (text_item[0].offsetTop > 190) {\n        tooltip.css(\"height\", '245px');\n        tooltip_content.css(\"height\", '200px');\n    } else {\n        tooltip.css(\"height\", '');\n        tooltip_content.css(\"height\", '');\n    }\n\n    $(\"#tooltip-header\").html(\"共\" + related_weibo_num + \"条相关微博\");\n}\n\nvar wordsAndValue = [];\nvar wordsOnly = [];\nvar valueOnly = [];\n\n//实现分词并统计个数\nfunction wordseg(allText, idfArray) {\n\n    //loaddic();\n    var list = [];\n    var list1 = [];\n    var list2 = [];\n    var text = allText;\n    var stopWords = ['的', '是', '我', ',', '自己', '哈哈', '今天', '北京', '啊', '你', '也', '为', '每', '人', '着', '个', '说', '们', '在', '再', '它', '若', '没', '有', '想', '她', '都', '不', '分', '享', '客', '户', '一', '那', '这', '呀', '吧', '些', '很', '啦', '了', '吗', '得', '怎', '什', '么', '多', '少'];\n    //console.log(stopWords);\n    if (!Array.prototype.forEach) {\n        Array.prototype.forEach = function (callback, thisArg) {\n            var T, k;\n            if (this === null) {\n                throw new TypeError(\" this is null or not defined\");\n            }\n            var O = Object(this);\n            var len = O.length >>> 0; // Hack to convert O.length to a UInt32 \n            if (({}).toString.call(callback) != \"[object Function]\") {\n                throw new TypeError(callback + \" is not a function\");\n            }\n            if (thisArg) {\n                T = thisArg;\n            }\n            k = 0;\n            while (k < len) {\n                var kValue;\n                if (k in O) {\n                    kValue = O[k];\n                    callback.call(T, kValue, k, O);\n                }\n                k++;\n            }\n        };\n    }\n\n    var terms = Object.create(null);\n    //console.log(text);\n    //把中文分开\n    var regexp = /[^\\u4E00-\\u9FFF\\u3400-\\u4DBF]+/g;\n    text = text.replace(regexp, '\\n');\n    //console.log(text);\n\n    stopWords.forEach(function (stopWord) {\n        if (!/^[\\u4E00-\\u9FFF\\u3400-\\u4DBF]+$/.test(stopWord)) return;\n        text = text.replace(new RegExp(stopWord, 'g'), 'a');\n    });\n    text = text.replace(/a+/g, '\\n');\n    //console.log(text);\n    var chunks = text.split(/\\n+/);\n    var pendingTerms = Object.create(null);\n    chunks.forEach(function processChunk(chunk) {\n        if (chunk.length <= 1) return;\n        var substrings = [];\n        //console.log(chunk);\n        substrings = getAllSubStrings(chunk, 5);\n        //console.log(substrings);\n        substrings.forEach(function (substr) {\n            if (substr.length <= 1) //不取单个字的词\n                return;\n            if (!(substr in pendingTerms)) pendingTerms[substr] = 0;\n            pendingTerms[substr]++;\n        });\n    });\n    for (var term in pendingTerms) {\n        if (!(term in terms)) terms[term] = 0;\n\n        terms[term] += pendingTerms[term];\n    }\n    pendingTerms = undefined;\n\n    for (term in terms) {\n        if (terms[term] < 0) continue;\n        if (idfArray[term]) {\n            terms[term] *= idfArray[term];\n        } else {}\n        list.push([term, terms[term]]);\n    }\n\n    list = list.sort(function (a, b) {\n        if (a[1] > b[1]) return -1;\n        if (a[1] < b[1]) return 1;\n        if (a[0] === b[0]) return 0;\n        var t = [a[0], b[0]].sort();\n        if (t[0] !== a[0]) return 1;\n        return -1;\n    });\n\n    for (var i = 0; i < list.length; i++) {\n        list2.push(list[i][0]);\n        list1.push(list[i][1]);\n    }\n\n    wordsOnly = list2;\n    valueOnly = list1;\n\n    return wordsOnly[0];\n}\n\n/**\r\n * 获得字符串的子串\r\n * @param  {string} str 需要处理的字符串\r\n * @param  {int} maxLength 一次处理的最长长度\r\n * @return {array} result 子串组成的数组 \r\n */\nfunction getAllSubStrings(str, maxLength) {\n    if (!str.length) return [];\n\n    var result = [];\n    var i = Math.min(str.length, maxLength);\n    do {\n        result.push(str.substr(0, i));\n    } while (--i);\n\n    if (str.length > 1) result = result.concat(getAllSubStrings(str.substr(1), maxLength)); // 迭代\n\n    return result;\n}\nexports.weiboTextMap = weiboTextMap;\n\n},{}]},{},[1]);\n"],"file":"js/bundle.dabba67e.js","sourceRoot":"/source/"}